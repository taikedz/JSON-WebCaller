#!/usr/bin/python3

mainhelp = '''
Call webservices defined using a JSON file of pre-populated default data

    webcall JSONFILE ACTION [DATA ...]

Reads a JSON file from where to obtain data, and runs the specified ACTION.

Data is a series of key-value pairs to be applied at the top level of the request data.

If JSONFILE is a folder, it will look for a "webservices.json" file in that folder.

This allows these shorthands

    webcall ~ create
    webcall . create

to look in the home directory and in the current directory respectively.

'''

from sys import argv
import jsonfile
import config
import console
import clisplitter

def requireargs(myargs, count, helptext):
    if len(myargs) < count+1:
        console.printe(helptext)
        exit(3)

# ===============

requireargs(argv, 1, mainhelp)

# Config Load

try:
    jsonfilepath = config.getConfigPath(argv[1], "webservices.json")
    doconfig = jsonfile.JSONFile(jsonfilepath)

except IOError as e:
    console.faile(str(e))
    exit(5)

# API Load

if "api" not in doconfig.data.keys():
    console.faile("No API engine specified.")
    exit(3)
elif doconfig.data["api"] == "json":
    from jwcjson import api as webapi
else:
    console.faile("API engine "+doconfig.data["api"]+" not supported.")
    exit(4)

# ===================
# Check for actions available - and helpfully list if user omitted action

actionlist = []
for action in doconfig.data["actions"]:
    actionlist.append(action)

requireargs(argv, 2, "Available options:\n\t%s" % ('\n\t'.join(actionlist),))

targetaction = argv[2]
try:
    actionprofile = doconfig.data["actions"][targetaction]
except KeyError:
    console.faile("No such action "+targetaction)
    exit(1)

# ===========================
# Let the API and definitions handle the rest
# for our part, alea jacta est.

try:
    artefacts, urimodifiers = clisplitter.splitout(argv[3:])
    webapi.request(doconfig.data["key"], actionprofile, artefacts, urimodifiers )
except Exception as e:
    console.faile(str(e) )
